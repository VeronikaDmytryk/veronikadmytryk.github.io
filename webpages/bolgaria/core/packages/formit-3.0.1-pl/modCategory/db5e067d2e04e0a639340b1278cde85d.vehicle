<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      'e96ef16aa9634c83bc70970c33be127d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"fiDefaultEmailTpl","description":"The default chunk used for the email. Please do not edit this chunk, as this will be overwritten when updating FormIt.","editor_type":0,"category":0,"cache_type":0,"snippet":"<p>[[+fields]]<\\/p>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<p>[[+fields]]<\\/p>"}',
        'guid' => '37853428084086f62889e92e271e4aa0',
        'native_key' => NULL,
        'signature' => 'd102f3ef7b87f073ffb14b367c243af5',
      ),
      'a7816678f8caf9986945ba67b6fdce42' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"fiDefaultFiarTpl","description":"The default chunk used for the autoresponder email. Please do not edit this chunk, as this will be overwritten when updating FormIt.","editor_type":0,"category":0,"cache_type":0,"snippet":"<p>Hello [[+name]],<\\/p>\\n\\n<p>Your message has been received. We will respond as soon as possible. Thank you for contacting us.<\\/p>\\n\\n<p>NOTE: This is an automatic response; please do not respond to this message directly.<\\/p>\\n\\n<p>Here is your message:<br \\/>\\n[[+message:nl2br]]<\\/p>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<p>Hello [[+name]],<\\/p>\\n\\n<p>Your message has been received. We will respond as soon as possible. Thank you for contacting us.<\\/p>\\n\\n<p>NOTE: This is an automatic response; please do not respond to this message directly.<\\/p>\\n\\n<p>Here is your message:<br \\/>\\n[[+message:nl2br]]<\\/p>"}',
        'guid' => '9beeee59a5323c327d0d427d40f68893',
        'native_key' => NULL,
        'signature' => '66deeab8b63a2bd63280e2cb9e6010f9',
      ),
      '829c2575329f61b716053c1a47bc5827' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"fiDefaultOptGroupTpl","description":"The default chunk used by the FormItCountryOptions snippet for the select optgroup. Please do not edit this chunk, as this will be overwritten when updating FormIt.","editor_type":0,"category":0,"cache_type":0,"snippet":"<optgroup label=\\"[[+text]]\\">\\n    [[+options]]\\n<\\/optgroup>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<optgroup label=\\"[[+text]]\\">\\n    [[+options]]\\n<\\/optgroup>"}',
        'guid' => 'c605ab5f5592b730e191d2c899f19c82',
        'native_key' => NULL,
        'signature' => '072717edc9ee61eaf891a9a5f64c5fb8',
      ),
      'bc2f1a3e59765d0ea6c9d6e49b75cf7a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"fiDefaultOptionTpl","description":"The default chunk used by the FormItCountryOptions snippet for the select option. Please do not edit this chunk, as this will be overwritten when updating FormIt.","editor_type":0,"category":0,"cache_type":0,"snippet":"<option value=\\"[[+value]]\\"[[+selected]]>[[+text]]<\\/option>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<option value=\\"[[+value]]\\"[[+selected]]>[[+text]]<\\/option>"}',
        'guid' => 'ed5a207f603fe599182f26ed7b0b654a',
        'native_key' => NULL,
        'signature' => '145d1329a26cf53e2930a9c4d4091432',
      ),
    ),
    'Snippets' => 
    array (
      '7c9732046a7ccc3642a1aae76bc7687a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormIt","description":"A dynamic form processing snippet.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormIt\\n *\\n * A dynamic form processing Snippet for MODx Revolution.\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n$fi->initialize($modx->context->get(\'key\'));\\n$fi->loadRequest();\\n\\n$fields = $fi->request->prepare();\\nreturn $fi->request->handle($fields);","locked":0,"properties":"a:58:{s:5:\\"hooks\\";a:7:{s:4:\\"name\\";s:5:\\"hooks\\";s:4:\\"desc\\";s:22:\\"prop_formit.hooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"preHooks\\";a:7:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:25:\\"prop_formit.prehooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"submitVar\\";a:7:{s:4:\\"name\\";s:9:\\"submitVar\\";s:4:\\"desc\\";s:26:\\"prop_formit.submitvar_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"validate\\";a:7:{s:4:\\"name\\";s:8:\\"validate\\";s:4:\\"desc\\";s:25:\\"prop_formit.validate_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"errTpl\\";a:7:{s:4:\\"name\\";s:6:\\"errTpl\\";s:4:\\"desc\\";s:23:\\"prop_formit.errtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:37:\\"<span class=\\"error\\">[[+error]]<\\/span>\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:22:\\"validationErrorMessage\\";a:7:{s:4:\\"name\\";s:22:\\"validationErrorMessage\\";s:4:\\"desc\\";s:39:\\"prop_formit.validationerrormessage_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:96:\\"<p class=\\"error\\">A form validation error occurred. Please check the values you have entered.<\\/p>\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:22:\\"validationErrorBulkTpl\\";a:7:{s:4:\\"name\\";s:22:\\"validationErrorBulkTpl\\";s:4:\\"desc\\";s:39:\\"prop_formit.validationerrorbulktpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:19:\\"<li>[[+error]]<\\/li>\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:26:\\"trimValuesBeforeValidation\\";a:7:{s:4:\\"name\\";s:26:\\"trimValuesBeforeValidation\\";s:4:\\"desc\\";s:43:\\"prop_formit.trimvaluesdeforevalidation_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"customValidators\\";a:7:{s:4:\\"name\\";s:16:\\"customValidators\\";s:4:\\"desc\\";s:33:\\"prop_formit.customvalidators_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"clearFieldsOnSuccess\\";a:7:{s:4:\\"name\\";s:20:\\"clearFieldsOnSuccess\\";s:4:\\"desc\\";s:37:\\"prop_formit.clearfieldsonsuccess_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"successMessage\\";a:7:{s:4:\\"name\\";s:14:\\"successMessage\\";s:4:\\"desc\\";s:31:\\"prop_formit.successmessage_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:25:\\"successMessagePlaceholder\\";a:7:{s:4:\\"name\\";s:25:\\"successMessagePlaceholder\\";s:4:\\"desc\\";s:42:\\"prop_formit.successmessageplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:17:\\"fi.successMessage\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"store\\";a:7:{s:4:\\"name\\";s:5:\\"store\\";s:4:\\"desc\\";s:22:\\"prop_formit.store_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"placeholderPrefix\\";a:7:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:34:\\"prop_formit.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"fi.\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"storeTime\\";a:7:{s:4:\\"name\\";s:9:\\"storeTime\\";s:4:\\"desc\\";s:26:\\"prop_formit.storetime_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"300\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"storeLocation\\";a:7:{s:4:\\"name\\";s:13:\\"storeLocation\\";s:4:\\"desc\\";s:30:\\"prop_formit.storelocation_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:5:\\"value\\";s:5:\\"cache\\";s:4:\\"text\\";s:16:\\"formit.opt_cache\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"session\\";s:4:\\"text\\";s:18:\\"formit.opt_session\\";}}s:5:\\"value\\";s:5:\\"cache\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"allowFiles\\";a:7:{s:4:\\"name\\";s:10:\\"allowFiles\\";s:4:\\"desc\\";s:27:\\"prop_formit.allowfiles_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"spamEmailFields\\";a:7:{s:4:\\"name\\";s:15:\\"spamEmailFields\\";s:4:\\"desc\\";s:32:\\"prop_formit.spamemailfields_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"spamCheckIp\\";a:7:{s:4:\\"name\\";s:11:\\"spamCheckIp\\";s:4:\\"desc\\";s:28:\\"prop_formit.spamcheckip_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"recaptchaJs\\";a:7:{s:4:\\"name\\";s:11:\\"recaptchaJs\\";s:4:\\"desc\\";s:28:\\"prop_formit.recaptchajs_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"{}\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"recaptchaTheme\\";a:7:{s:4:\\"name\\";s:14:\\"recaptchaTheme\\";s:4:\\"desc\\";s:31:\\"prop_formit.recaptchatheme_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:5:\\"value\\";s:3:\\"red\\";s:4:\\"text\\";s:14:\\"formit.opt_red\\";}i:1;a:2:{s:5:\\"value\\";s:5:\\"white\\";s:4:\\"text\\";s:16:\\"formit.opt_white\\";}i:2;a:2:{s:5:\\"value\\";s:5:\\"clean\\";s:4:\\"text\\";s:16:\\"formit.opt_clean\\";}i:3;a:2:{s:5:\\"value\\";s:10:\\"blackglass\\";s:4:\\"text\\";s:21:\\"formit.opt_blackglass\\";}}s:5:\\"value\\";s:5:\\"clean\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"redirectTo\\";a:7:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:27:\\"prop_formit.redirectto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"redirectParams\\";a:7:{s:4:\\"name\\";s:14:\\"redirectParams\\";s:4:\\"desc\\";s:31:\\"prop_formit.redirectparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"emailTo\\";a:7:{s:4:\\"name\\";s:7:\\"emailTo\\";s:4:\\"desc\\";s:24:\\"prop_formit.emailto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"emailToName\\";a:7:{s:4:\\"name\\";s:11:\\"emailToName\\";s:4:\\"desc\\";s:28:\\"prop_formit.emailtoname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"emailFrom\\";a:7:{s:4:\\"name\\";s:9:\\"emailFrom\\";s:4:\\"desc\\";s:26:\\"prop_formit.emailfrom_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"emailFromName\\";a:7:{s:4:\\"name\\";s:13:\\"emailFromName\\";s:4:\\"desc\\";s:30:\\"prop_formit.emailfromname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"emailReplyTo\\";a:7:{s:4:\\"name\\";s:12:\\"emailReplyTo\\";s:4:\\"desc\\";s:29:\\"prop_formit.emailreplyto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"emailReplyToName\\";a:7:{s:4:\\"name\\";s:16:\\"emailReplyToName\\";s:4:\\"desc\\";s:33:\\"prop_formit.emailreplytoname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"emailCC\\";a:7:{s:4:\\"name\\";s:7:\\"emailCC\\";s:4:\\"desc\\";s:24:\\"prop_formit.emailcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"emailCCName\\";a:7:{s:4:\\"name\\";s:11:\\"emailCCName\\";s:4:\\"desc\\";s:28:\\"prop_formit.emailccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"emailBCC\\";a:7:{s:4:\\"name\\";s:8:\\"emailBCC\\";s:4:\\"desc\\";s:25:\\"prop_formit.emailbcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"emailBCCName\\";a:7:{s:4:\\"name\\";s:12:\\"emailBCCName\\";s:4:\\"desc\\";s:29:\\"prop_formit.emailbccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"emailReturnPath\\";a:7:{s:4:\\"name\\";s:15:\\"emailReturnPath\\";s:4:\\"desc\\";s:32:\\"prop_formit.emailreturnpath_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"emailSubject\\";a:7:{s:4:\\"name\\";s:12:\\"emailSubject\\";s:4:\\"desc\\";s:29:\\"prop_formit.emailsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:23:\\"emailUseFieldForSubject\\";a:7:{s:4:\\"name\\";s:23:\\"emailUseFieldForSubject\\";s:4:\\"desc\\";s:40:\\"prop_formit.emailusefieldforsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"emailHtml\\";a:7:{s:4:\\"name\\";s:9:\\"emailHtml\\";s:4:\\"desc\\";s:26:\\"prop_formit.emailhtml_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"emailConvertNewlines\\";a:7:{s:4:\\"name\\";s:20:\\"emailConvertNewlines\\";s:4:\\"desc\\";s:37:\\"prop_formit.emailconvertnewlines_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"emailMultiWrapper\\";a:7:{s:4:\\"name\\";s:17:\\"emailMultiWrapper\\";s:4:\\"desc\\";s:34:\\"prop_formit.emailmultiwrapper_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:10:\\"[[+value]]\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:19:\\"emailMultiSeparator\\";a:7:{s:4:\\"name\\";s:19:\\"emailMultiSeparator\\";s:4:\\"desc\\";s:36:\\"prop_formit.emailmultiseparator_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"fiarTpl\\";a:7:{s:4:\\"name\\";s:7:\\"fiarTpl\\";s:4:\\"desc\\";s:24:\\"prop_formit.fiartpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarToField\\";a:7:{s:4:\\"name\\";s:11:\\"fiarToField\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiartofield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarSubject\\";a:7:{s:4:\\"name\\";s:11:\\"fiarSubject\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiarsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:30:\\"[[++site_name]] Auto-Responder\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"fiarFrom\\";a:7:{s:4:\\"name\\";s:8:\\"fiarFrom\\";s:4:\\"desc\\";s:25:\\"prop_formit.fiarfrom_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"fiarFromName\\";a:7:{s:4:\\"name\\";s:12:\\"fiarFromName\\";s:4:\\"desc\\";s:29:\\"prop_formit.fiarfromname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarReplyTo\\";a:7:{s:4:\\"name\\";s:11:\\"fiarReplyTo\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiarreplyto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"fiarReplyToName\\";a:7:{s:4:\\"name\\";s:15:\\"fiarReplyToName\\";s:4:\\"desc\\";s:32:\\"prop_formit.fiarreplytoname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"fiarCC\\";a:7:{s:4:\\"name\\";s:6:\\"fiarCC\\";s:4:\\"desc\\";s:23:\\"prop_formit.fiarcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"fiarCCName\\";a:7:{s:4:\\"name\\";s:10:\\"fiarCCName\\";s:4:\\"desc\\";s:25:\\"prop_fiar.fiarccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"fiarBCC\\";a:7:{s:4:\\"name\\";s:7:\\"fiarBCC\\";s:4:\\"desc\\";s:24:\\"prop_formit.fiarbcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarBCCName\\";a:7:{s:4:\\"name\\";s:11:\\"fiarBCCName\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiarbccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"fiarHtml\\";a:7:{s:4:\\"name\\";s:8:\\"fiarHtml\\";s:4:\\"desc\\";s:25:\\"prop_formit.fiarhtml_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathMinRange\\";a:7:{s:4:\\"name\\";s:12:\\"mathMinRange\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathminrange_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathMaxRange\\";a:7:{s:4:\\"name\\";s:12:\\"mathMaxRange\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathmaxrange_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"100\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"mathField\\";a:7:{s:4:\\"name\\";s:9:\\"mathField\\";s:4:\\"desc\\";s:26:\\"prop_formit.mathfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"math\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathOp1Field\\";a:7:{s:4:\\"name\\";s:12:\\"mathOp1Field\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathop1field_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"op1\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathOp2Field\\";a:7:{s:4:\\"name\\";s:12:\\"mathOp2Field\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathop2field_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"op2\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"mathOperatorField\\";a:7:{s:4:\\"name\\";s:17:\\"mathOperatorField\\";s:4:\\"desc\\";s:34:\\"prop_formit.mathoperatorfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"operator\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormIt\\n *\\n * A dynamic form processing Snippet for MODx Revolution.\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n$fi->initialize($modx->context->get(\'key\'));\\n$fi->loadRequest();\\n\\n$fields = $fi->request->prepare();\\nreturn $fi->request->handle($fields);"}',
        'guid' => '5b772e84a681c733e004a3eddd72d525',
        'native_key' => NULL,
        'signature' => '4d9b9fd56fb1252ab301d195e35ebc23',
      ),
      '1670b9bce16912319af33458bc0743c2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItAutoResponder","description":"Custom hook for FormIt to handle Auto-Response emails.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt hook for auto-responders.\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n$tpl = $modx->getOption(\'fiarTpl\',$scriptProperties,\'fiDefaultFiarTpl\');\\n$mailFrom = $modx->getOption(\'fiarFrom\',$scriptProperties,$modx->getOption(\'emailsender\'));\\n$mailFromName = $modx->getOption(\'fiarFromName\',$scriptProperties,$modx->getOption(\'site_name\'));\\n$mailSender = $modx->getOption(\'fiarSender\',$scriptProperties,$modx->getOption(\'emailsender\'));\\n$mailSubject = $modx->getOption(\'fiarSubject\',$scriptProperties,\'[[++site_name]] Auto-Responder\');\\n$mailSubject = str_replace(array(\'[[++site_name]]\',\'[[++emailsender]]\'),array($modx->getOption(\'site_name\'),$modx->getOption(\'emailsender\')),$mailSubject);\\n$fiarFiles = $modx->getOption(\'fiarFiles\',$scriptProperties,false);\\n$isHtml = $modx->getOption(\'fiarHtml\',$scriptProperties,true);\\n$toField = $modx->getOption(\'fiarToField\',$scriptProperties,\'email\');\\n$multiSeparator = $modx->getOption(\'fiarMultiSeparator\',$formit->config,\\"\\\\n\\");\\n$multiWrapper = $modx->getOption(\'fiarMultiWrapper\',$formit->config,\\"[[+value]]\\");\\n$required = $modx->getOption(\'fiarRequired\',$scriptProperties,true);\\nif (empty($fields[$toField])) {\\n    if ($required) {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] Auto-responder could not find field `\'.$toField.\'` in form submission.\');\\n        return false;\\n    } else {\\n        return true;\\n    }\\n}\\n\\n\\/* handle checkbox and array fields *\\/\\nforeach ($fields as $k => &$v) {\\n    if (is_array($v) && !empty($v[\'name\']) && isset($v[\'error\']) && $v[\'error\'] == UPLOAD_ERR_OK) {\\n        $fields[$k] = $v[\'name\'];\\n    } else if (is_array($v)) {\\n        $vOpts = array();\\n        foreach ($v as $vKey => $vValue) {\\n            if (is_string($vKey) && !empty($vKey)) {\\n                $vKey = $k.\'.\'.$vKey;\\n                $fields[$vKey] = $vValue;\\n            } else {\\n                $vOpts[] = str_replace(\'[[+value]]\',$vValue,$multiWrapper);\\n            }\\n        }\\n        $newValue = implode($multiSeparator,$vOpts);\\n        if (!empty($vOpts)) {\\n            $fields[$k] = $newValue;\\n        }\\n    }\\n}\\n\\n\\/* setup placeholders *\\/\\n$placeholders = $fields;\\n$mailTo= $fields[$toField];\\n\\n$message = $formit->getChunk($tpl,$placeholders);\\n$modx->parser->processElementTags(\'\',$message,true,false);\\n\\n$modx->getService(\'mail\', \'mail.modPHPMailer\');\\n$modx->mail->reset();\\n$modx->mail->set(modMail::MAIL_BODY,$message);\\n$modx->mail->set(modMail::MAIL_FROM,$hook->_process($mailFrom,$placeholders));\\n$modx->mail->set(modMail::MAIL_FROM_NAME,$hook->_process($mailFromName,$placeholders));\\n$modx->mail->set(modMail::MAIL_SENDER,$hook->_process($mailSender,$placeholders));\\n$modx->mail->set(modMail::MAIL_SUBJECT,$hook->_process($mailSubject,$placeholders));\\n$modx->mail->address(\'to\',$mailTo);\\n$modx->mail->setHTML($isHtml);\\n\\n\\/* add attachments *\\/\\nif($fiarFiles){\\n    $fiarFiles = explode(\',\', $fiarFiles);\\n    foreach($fiarFiles AS $file){\\n        $modx->mail->mailer->AddAttachment($file);\\n    }\\n}\\n\\n\\/* reply to *\\/\\n$emailReplyTo = $modx->getOption(\'fiarReplyTo\',$scriptProperties,$mailFrom);\\n$emailReplyTo = $hook->_process($emailReplyTo,$fields);\\n$emailReplyToName = $modx->getOption(\'fiarReplyToName\',$scriptProperties,$mailFromName);\\n$emailReplyToName = $hook->_process($emailReplyToName,$fields);\\nif (!empty($emailReplyTo)) {\\n    $modx->mail->address(\'reply-to\',$emailReplyTo,$emailReplyToName);\\n}\\n\\n\\/* cc *\\/\\n$emailCC = $modx->getOption(\'fiarCC\',$scriptProperties,\'\');\\nif (!empty($emailCC)) {\\n    $emailCCName = $modx->getOption(\'fiarCCName\',$scriptProperties,\'\');\\n    $emailCC = explode(\',\',$emailCC);\\n    $emailCCName = explode(\',\',$emailCCName);\\n    $numAddresses = count($emailCC);\\n    for ($i=0;$i<$numAddresses;$i++) {\\n        $etn = !empty($emailCCName[$i]) ? $emailCCName[$i] : \'\';\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\n        $emailCC[$i] = $hook->_process($emailCC[$i],$fields);\\n        if (!empty($emailCC[$i])) {\\n            $modx->mail->address(\'cc\',$emailCC[$i],$etn);\\n        }\\n    }\\n}\\n\\n\\/* bcc *\\/\\n$emailBCC = $modx->getOption(\'fiarBCC\',$scriptProperties,\'\');\\nif (!empty($emailBCC)) {\\n    $emailBCCName = $modx->getOption(\'fiarBCCName\',$scriptProperties,\'\');\\n    $emailBCC = explode(\',\',$emailBCC);\\n    $emailBCCName = explode(\',\',$emailBCCName);\\n    $numAddresses = count($emailBCC);\\n    for ($i=0;$i<$numAddresses;$i++) {\\n        $etn = !empty($emailBCCName[$i]) ? $emailBCCName[$i] : \'\';\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\n        $emailBCC[$i] = $hook->_process($emailBCC[$i],$fields);\\n        if (!empty($emailBCC[$i])) {\\n            $modx->mail->address(\'bcc\',$emailBCC[$i],$etn);\\n        }\\n    }\\n}\\n\\nif (!$formit->inTestMode) {\\n    if (!$modx->mail->send()) {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] An error occurred while trying to send the auto-responder email: \'.$modx->mail->mailer->ErrorInfo);\\n        return false;\\n    }\\n}\\n$modx->mail->reset();\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt hook for auto-responders.\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n$tpl = $modx->getOption(\'fiarTpl\',$scriptProperties,\'fiDefaultFiarTpl\');\\n$mailFrom = $modx->getOption(\'fiarFrom\',$scriptProperties,$modx->getOption(\'emailsender\'));\\n$mailFromName = $modx->getOption(\'fiarFromName\',$scriptProperties,$modx->getOption(\'site_name\'));\\n$mailSender = $modx->getOption(\'fiarSender\',$scriptProperties,$modx->getOption(\'emailsender\'));\\n$mailSubject = $modx->getOption(\'fiarSubject\',$scriptProperties,\'[[++site_name]] Auto-Responder\');\\n$mailSubject = str_replace(array(\'[[++site_name]]\',\'[[++emailsender]]\'),array($modx->getOption(\'site_name\'),$modx->getOption(\'emailsender\')),$mailSubject);\\n$fiarFiles = $modx->getOption(\'fiarFiles\',$scriptProperties,false);\\n$isHtml = $modx->getOption(\'fiarHtml\',$scriptProperties,true);\\n$toField = $modx->getOption(\'fiarToField\',$scriptProperties,\'email\');\\n$multiSeparator = $modx->getOption(\'fiarMultiSeparator\',$formit->config,\\"\\\\n\\");\\n$multiWrapper = $modx->getOption(\'fiarMultiWrapper\',$formit->config,\\"[[+value]]\\");\\n$required = $modx->getOption(\'fiarRequired\',$scriptProperties,true);\\nif (empty($fields[$toField])) {\\n    if ($required) {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] Auto-responder could not find field `\'.$toField.\'` in form submission.\');\\n        return false;\\n    } else {\\n        return true;\\n    }\\n}\\n\\n\\/* handle checkbox and array fields *\\/\\nforeach ($fields as $k => &$v) {\\n    if (is_array($v) && !empty($v[\'name\']) && isset($v[\'error\']) && $v[\'error\'] == UPLOAD_ERR_OK) {\\n        $fields[$k] = $v[\'name\'];\\n    } else if (is_array($v)) {\\n        $vOpts = array();\\n        foreach ($v as $vKey => $vValue) {\\n            if (is_string($vKey) && !empty($vKey)) {\\n                $vKey = $k.\'.\'.$vKey;\\n                $fields[$vKey] = $vValue;\\n            } else {\\n                $vOpts[] = str_replace(\'[[+value]]\',$vValue,$multiWrapper);\\n            }\\n        }\\n        $newValue = implode($multiSeparator,$vOpts);\\n        if (!empty($vOpts)) {\\n            $fields[$k] = $newValue;\\n        }\\n    }\\n}\\n\\n\\/* setup placeholders *\\/\\n$placeholders = $fields;\\n$mailTo= $fields[$toField];\\n\\n$message = $formit->getChunk($tpl,$placeholders);\\n$modx->parser->processElementTags(\'\',$message,true,false);\\n\\n$modx->getService(\'mail\', \'mail.modPHPMailer\');\\n$modx->mail->reset();\\n$modx->mail->set(modMail::MAIL_BODY,$message);\\n$modx->mail->set(modMail::MAIL_FROM,$hook->_process($mailFrom,$placeholders));\\n$modx->mail->set(modMail::MAIL_FROM_NAME,$hook->_process($mailFromName,$placeholders));\\n$modx->mail->set(modMail::MAIL_SENDER,$hook->_process($mailSender,$placeholders));\\n$modx->mail->set(modMail::MAIL_SUBJECT,$hook->_process($mailSubject,$placeholders));\\n$modx->mail->address(\'to\',$mailTo);\\n$modx->mail->setHTML($isHtml);\\n\\n\\/* add attachments *\\/\\nif($fiarFiles){\\n    $fiarFiles = explode(\',\', $fiarFiles);\\n    foreach($fiarFiles AS $file){\\n        $modx->mail->mailer->AddAttachment($file);\\n    }\\n}\\n\\n\\/* reply to *\\/\\n$emailReplyTo = $modx->getOption(\'fiarReplyTo\',$scriptProperties,$mailFrom);\\n$emailReplyTo = $hook->_process($emailReplyTo,$fields);\\n$emailReplyToName = $modx->getOption(\'fiarReplyToName\',$scriptProperties,$mailFromName);\\n$emailReplyToName = $hook->_process($emailReplyToName,$fields);\\nif (!empty($emailReplyTo)) {\\n    $modx->mail->address(\'reply-to\',$emailReplyTo,$emailReplyToName);\\n}\\n\\n\\/* cc *\\/\\n$emailCC = $modx->getOption(\'fiarCC\',$scriptProperties,\'\');\\nif (!empty($emailCC)) {\\n    $emailCCName = $modx->getOption(\'fiarCCName\',$scriptProperties,\'\');\\n    $emailCC = explode(\',\',$emailCC);\\n    $emailCCName = explode(\',\',$emailCCName);\\n    $numAddresses = count($emailCC);\\n    for ($i=0;$i<$numAddresses;$i++) {\\n        $etn = !empty($emailCCName[$i]) ? $emailCCName[$i] : \'\';\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\n        $emailCC[$i] = $hook->_process($emailCC[$i],$fields);\\n        if (!empty($emailCC[$i])) {\\n            $modx->mail->address(\'cc\',$emailCC[$i],$etn);\\n        }\\n    }\\n}\\n\\n\\/* bcc *\\/\\n$emailBCC = $modx->getOption(\'fiarBCC\',$scriptProperties,\'\');\\nif (!empty($emailBCC)) {\\n    $emailBCCName = $modx->getOption(\'fiarBCCName\',$scriptProperties,\'\');\\n    $emailBCC = explode(\',\',$emailBCC);\\n    $emailBCCName = explode(\',\',$emailBCCName);\\n    $numAddresses = count($emailBCC);\\n    for ($i=0;$i<$numAddresses;$i++) {\\n        $etn = !empty($emailBCCName[$i]) ? $emailBCCName[$i] : \'\';\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\n        $emailBCC[$i] = $hook->_process($emailBCC[$i],$fields);\\n        if (!empty($emailBCC[$i])) {\\n            $modx->mail->address(\'bcc\',$emailBCC[$i],$etn);\\n        }\\n    }\\n}\\n\\nif (!$formit->inTestMode) {\\n    if (!$modx->mail->send()) {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] An error occurred while trying to send the auto-responder email: \'.$modx->mail->mailer->ErrorInfo);\\n        return false;\\n    }\\n}\\n$modx->mail->reset();\\nreturn true;"}',
        'guid' => '4e4af649916ac9535c3967ea2c11f749',
        'native_key' => NULL,
        'signature' => '075e7d6c68271bee11c7af153390e9d4',
      ),
      '306ff1b8d14e7c3bdc234829906c4a59' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItRetriever","description":"Fetches a form submission for a user for displaying on a thank you page.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItRetriever\\n *\\n * Retrieves a prior form submission that was stored with the &store property\\n * in a FormIt call.\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n\\n\\/* setup properties *\\/\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'fi.\');\\n$eraseOnLoad = $modx->getOption(\'eraseOnLoad\',$scriptProperties,false);\\n$redirectToOnNotFound = $modx->getOption(\'redirectToOnNotFound\',$scriptProperties,false);\\n\\n\\/* fetch data from cache and set to placeholders *\\/\\n$fi->loadRequest();\\n$fi->request->loadDictionary();\\n$data = $fi->request->dictionary->retrieve();\\nif (!empty($data)) {\\n    \\/* set data to placeholders *\\/\\n    foreach ($data as $k=>$v) {\\n        \\/*checkboxes & other multi-values are stored as arrays, must be imploded*\\/\\n        if (is_array($v)) {\\n            $data[$k] = implode(\',\',$v);\\n        }\\n    }\\n    $modx->toPlaceholders($data,$placeholderPrefix,\'\');\\n    \\n    \\/* if set, erase the data on load, otherwise depend on cache expiry time *\\/\\n    if ($eraseOnLoad) {\\n        $fi->request->dictionary->erase();\\n    }\\n\\/* if the data\'s not found, and we want to redirect somewhere if so, do here *\\/\\n} else if (!empty($redirectToOnNotFound)) {\\n    $url = $modx->makeUrl($redirectToOnNotFound);\\n    $modx->sendRedirect($url);\\n}\\nreturn \'\';","locked":0,"properties":"a:4:{s:17:\\"placeholderPrefix\\";a:7:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:31:\\"prop_fir.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"fi.\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"redirectToOnNotFound\\";a:7:{s:4:\\"name\\";s:20:\\"redirectToOnNotFound\\";s:4:\\"desc\\";s:34:\\"prop_fir.redirecttoonnotfound_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"eraseOnLoad\\";a:7:{s:4:\\"name\\";s:11:\\"eraseOnLoad\\";s:4:\\"desc\\";s:25:\\"prop_fir.eraseonload_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"storeLocation\\";a:7:{s:4:\\"name\\";s:13:\\"storeLocation\\";s:4:\\"desc\\";s:27:\\"prop_fir.storelocation_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:5:\\"value\\";s:5:\\"cache\\";s:4:\\"text\\";s:16:\\"formit.opt_cache\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"session\\";s:4:\\"text\\";s:18:\\"formit.opt_session\\";}}s:5:\\"value\\";s:5:\\"cache\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItRetriever\\n *\\n * Retrieves a prior form submission that was stored with the &store property\\n * in a FormIt call.\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n\\n\\/* setup properties *\\/\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'fi.\');\\n$eraseOnLoad = $modx->getOption(\'eraseOnLoad\',$scriptProperties,false);\\n$redirectToOnNotFound = $modx->getOption(\'redirectToOnNotFound\',$scriptProperties,false);\\n\\n\\/* fetch data from cache and set to placeholders *\\/\\n$fi->loadRequest();\\n$fi->request->loadDictionary();\\n$data = $fi->request->dictionary->retrieve();\\nif (!empty($data)) {\\n    \\/* set data to placeholders *\\/\\n    foreach ($data as $k=>$v) {\\n        \\/*checkboxes & other multi-values are stored as arrays, must be imploded*\\/\\n        if (is_array($v)) {\\n            $data[$k] = implode(\',\',$v);\\n        }\\n    }\\n    $modx->toPlaceholders($data,$placeholderPrefix,\'\');\\n    \\n    \\/* if set, erase the data on load, otherwise depend on cache expiry time *\\/\\n    if ($eraseOnLoad) {\\n        $fi->request->dictionary->erase();\\n    }\\n\\/* if the data\'s not found, and we want to redirect somewhere if so, do here *\\/\\n} else if (!empty($redirectToOnNotFound)) {\\n    $url = $modx->makeUrl($redirectToOnNotFound);\\n    $modx->sendRedirect($url);\\n}\\nreturn \'\';"}',
        'guid' => '362902c54657679871e22fbf42c0a2a4',
        'native_key' => NULL,
        'signature' => 'c65c3f47d31394c30e649f45a5219d45',
      ),
      'e54c99c7bc309232f797edac9510414b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItIsChecked","description":"A custom output filter used with checkboxes\\/radios for checking checked status.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItIsChecked\\n *\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\n *\\n * @var string $input\\n * @var string $options\\n * @var modX $modx\\n *\\n * @package formit\\n *\\/\\n$output = \' \';\\nif ($input == $options) {\\n    $output = \' checked=\\"checked\\"\';\\n}\\n$input = $modx->fromJSON($input);\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\n  $output = \' checked=\\"checked\\"\';\\n}\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItIsChecked\\n *\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\n *\\n * @var string $input\\n * @var string $options\\n * @var modX $modx\\n *\\n * @package formit\\n *\\/\\n$output = \' \';\\nif ($input == $options) {\\n    $output = \' checked=\\"checked\\"\';\\n}\\n$input = $modx->fromJSON($input);\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\n  $output = \' checked=\\"checked\\"\';\\n}\\nreturn $output;"}',
        'guid' => '34aafa2a2982ac44aff2a9ab9b0efbab',
        'native_key' => NULL,
        'signature' => '4ea71326d7b0a175e677061a4b3e0c2d',
      ),
      'a8855358420b7ec29de30a2acff9632f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItIsSelected","description":"A custom output filter used with dropdowns for checking selected status.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItIsChecked\\n *\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\n *\\n * @var string $input\\n * @var string $options\\n * @var modX $modx\\n *\\n * @package formit\\n *\\/\\n$output = \' \';\\nif ($input == $options) {\\n    $output = \' selected=\\"selected\\"\';\\n}\\n$input = $modx->fromJSON($input);\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\n  $output = \' selected=\\"selected\\"\';\\n}\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItIsChecked\\n *\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\n *\\n * @var string $input\\n * @var string $options\\n * @var modX $modx\\n *\\n * @package formit\\n *\\/\\n$output = \' \';\\nif ($input == $options) {\\n    $output = \' selected=\\"selected\\"\';\\n}\\n$input = $modx->fromJSON($input);\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\n  $output = \' selected=\\"selected\\"\';\\n}\\nreturn $output;"}',
        'guid' => '23631acf030367f3a5fe56e5bf4ac4a9',
        'native_key' => NULL,
        'signature' => '1ba43b2d5dc6b09d131f107f0f29e1d6',
      ),
      'f94b6d1ba132a6a0510358a25858b89a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItCountryOptions","description":"A utility snippet for generating a dropdown list of countries.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItCountryOptions\\n *\\n * Automatically generates and outputs a country list for usage in forms\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n\\n\\/** @var fiCountryOptions $co *\\/\\n$co = $fi->loadModule(\'fiCountryOptions\',\'countryOptions\',$scriptProperties);\\n$co->initialize();\\n$co->getData();\\n$co->loadPrioritized();\\n$co->iterate();\\nreturn $co->output();","locked":0,"properties":"a:11:{s:8:\\"selected\\";a:7:{s:4:\\"name\\";s:8:\\"selected\\";s:4:\\"desc\\";s:23:\\"prop_fico.selected_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:18:\\"prop_fico.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:18:\\"fiDefaultOptionTpl\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"useIsoCode\\";a:7:{s:4:\\"name\\";s:10:\\"useIsoCode\\";s:4:\\"desc\\";s:25:\\"prop_fico.useisocode_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"prioritized\\";a:7:{s:4:\\"name\\";s:11:\\"prioritized\\";s:4:\\"desc\\";s:26:\\"prop_fico.prioritized_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"optGroupTpl\\";a:7:{s:4:\\"name\\";s:11:\\"optGroupTpl\\";s:4:\\"desc\\";s:26:\\"prop_fico.optgrouptpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\"fiDefaultOptGroupTpl\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"prioritizedGroupText\\";a:7:{s:4:\\"name\\";s:20:\\"prioritizedGroupText\\";s:4:\\"desc\\";s:35:\\"prop_fico.prioritizedgrouptext_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"allGroupText\\";a:7:{s:4:\\"name\\";s:12:\\"allGroupText\\";s:4:\\"desc\\";s:27:\\"prop_fico.allgrouptext_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"selectedAttribute\\";a:7:{s:4:\\"name\\";s:17:\\"selectedAttribute\\";s:4:\\"desc\\";s:32:\\"prop_fico.selectedattribute_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\" selected=\\"selected\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:28:\\"prop_fico.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"country\\";a:7:{s:4:\\"name\\";s:7:\\"country\\";s:4:\\"desc\\";s:22:\\"prop_fico.country_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:16:\\"[[++cultureKey]]\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"limited\\";a:7:{s:4:\\"name\\";s:7:\\"limited\\";s:4:\\"desc\\";s:22:\\"prop_fico.limited_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItCountryOptions\\n *\\n * Automatically generates and outputs a country list for usage in forms\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n\\n\\/** @var fiCountryOptions $co *\\/\\n$co = $fi->loadModule(\'fiCountryOptions\',\'countryOptions\',$scriptProperties);\\n$co->initialize();\\n$co->getData();\\n$co->loadPrioritized();\\n$co->iterate();\\nreturn $co->output();"}',
        'guid' => 'f531d99857eeee0a9aa36f47b2485bf0',
        'native_key' => NULL,
        'signature' => 'b13a83a4323d9a5ee53bf9d9f1b6e273',
      ),
      '01abfafb0067bb74ca3ddbc9c1f18929' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItStateOptions","description":"A utility snippet for generating a dropdown list of U.S. states.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItStateOptions\\n *\\n * Automatically generates and outputs a U.S. state list for usage in forms\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n\\n\\/** @var fiStateOptions $so *\\/\\n$so = $fi->loadModule(\'fiStateOptions\',\'stateOptions\',$scriptProperties);\\n$so->initialize();\\n$so->getData();\\n$so->iterate();\\nreturn $so->output();","locked":0,"properties":"a:6:{s:8:\\"selected\\";a:7:{s:4:\\"name\\";s:8:\\"selected\\";s:4:\\"desc\\";s:23:\\"prop_fiso.selected_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:18:\\"prop_fiso.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:18:\\"fiDefaultOptionTpl\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"useAbbr\\";a:7:{s:4:\\"name\\";s:7:\\"useAbbr\\";s:4:\\"desc\\";s:22:\\"prop_fiso.useabbr_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"selectedAttribute\\";a:7:{s:4:\\"name\\";s:17:\\"selectedAttribute\\";s:4:\\"desc\\";s:32:\\"prop_fiso.selectedattribute_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\" selected=\\"selected\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:28:\\"prop_fiso.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"country\\";a:7:{s:4:\\"name\\";s:7:\\"country\\";s:4:\\"desc\\";s:22:\\"prop_fiso.country_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:16:\\"[[++cultureKey]]\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormItStateOptions\\n *\\n * Automatically generates and outputs a U.S. state list for usage in forms\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n *\\n * @package formit\\n *\\/\\n\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\n\\n$fi = new FormIt($modx,$scriptProperties);\\n\\n\\/** @var fiStateOptions $so *\\/\\n$so = $fi->loadModule(\'fiStateOptions\',\'stateOptions\',$scriptProperties);\\n$so->initialize();\\n$so->getData();\\n$so->iterate();\\nreturn $so->output();"}',
        'guid' => '232ae1a6ca69f77d07c62232b8185b42',
        'native_key' => NULL,
        'signature' => 'cc0d14e67d50309c19bd5603a8d046fc',
      ),
      'bdcfba1fa3c2bd55ee74a0de8b6b04c9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItSaveForm","description":"Custom hook for FormIt to save the form.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt hook for saving filled-in forms. - Based on FormSave\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n$values = $hook->getValues();\\n$formName = $modx->getOption(\'formName\', $formit->config, \'form-\'.$modx->resource->get(\'id\'));\\n\\/\\/ process formName. Pick a value from the form\\n\\/\\/ Inspired from the email\'s hook of formit (fihooks.class.php)\\nif (is_string($formName)) {\\n    foreach ($fields as $k => $v) {\\n        if (is_scalar($k) && is_scalar($v)) {\\n            $formName = str_replace(\'[[+\'.$k.\']]\',$v,$formName);\\n        }\\n    }\\n}\\n\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\n\\/\\/ In order to use update process, you need to provide the hash key to the user somehow\\n\\/\\/ Usually with [[!FormItRetriever]] to populate this form field:\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\n\\/\\/ Disable if you want to use the session_id() in your hash, like FormIt does\\n\\/\\/ WARNING: this can cause potential hash key collisions and overwriting of the wrong form record!!\\n$formHashKeyRandom = $modx->getOption(\'formHashKeyRandom\', $formit->config, true);\\n\\/\\/ process formHashKeyField into variable for later use\\n$formHashKey = (isset($values[$formHashKeyField])) ? (string) $values[$formHashKeyField] : \'\';\\n\\/\\/ our hashing methods return 32 chars\\nif (strlen($formHashKey) !== 32) $formHashKey = \'\';\\nunset($values[$formHashKeyField]);\\n\\nif ($formFields) {\\n    $formFields = explode(\',\', $formFields);\\n    foreach($formFields as $k => $v) {\\n        $formFields[$k] = trim($v);\\n    }\\n}\\n\\/\\/ Build the data array\\n$dataArray = array();\\nif ($formFields) {\\n    foreach ($formFields as $field) {\\n        $fieldValue = isset($values[$field]) ? $values[$field] : \'\';\\n        \\/\\/ When field is file field, value is an array\\n        if (is_array($fieldValue) && isset($fieldValue[\'tmp_name\'], $fieldValue[\'name\'])) {\\n            $fieldValue = $fieldValue[\'name\'];\\n        }\\n        $dataArray[$field] = $fieldValue;\\n    }\\n} else {\\n    $dataArray = $values;\\n}\\n\\/\\/ Change the fieldnames\\nif ($fieldNames){\\n    $newDataArray = array();\\n    $fieldLabels = array();\\n    $formFieldNames = explode(\',\', $fieldNames);\\n    foreach($formFieldNames as $formFieldName){\\n        list($name, $label) = explode(\'==\', $formFieldName);\\n        $fieldLabels[trim($name)] = trim($label);\\n    }\\n    foreach ($dataArray as $key => $value) {\\n        if($fieldLabels[$key]){\\n            $newDataArray[$fieldLabels[$key]] = $value;\\n        }else{\\n            $newDataArray[$key] = $value;\\n        }\\n    }\\n    $dataArray = $newDataArray;\\n}\\n\\/\\/ We only enter update mode if we already have a valid formHashKey (tested above)\\n\\/\\/ AND the updateSavedForm param was set to a truth-y value.\\n$mode = ($updateSavedForm && $formHashKey) ? \'update\' : \'create\';\\n\\/\\/ Create\\/get obj\\n$newForm = null;\\nif ($mode === \'update\') {\\n    $newForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\n}\\nif ($newForm === null) $newForm = $modx->newObject(\'FormItForm\');\\n\\n\\/\\/ Handle encryption\\nif($formEncrypt){\\n    $dataArray = $newForm->encrypt($modx->toJSON($dataArray));\\n} else {\\n    $dataArray = $modx->toJSON($dataArray);\\n}\\n\\n\\/\\/ Create new hash key on create mode, and handle invalid hash keys. \\nif ($mode === \'create\') {\\n    $formHashKey = ($formHashKeyRandom) ? $newForm->generatePseudoRandomHash() : pathinfo($formit->getStoreKey(), PATHINFO_BASENAME);\\n}\\n\\n\\/\\/ Array from which to populate form record\\n$newFormArray = array();\\n\\n\\/\\/ Special case: if updateSavedForm has the flag \'values\' we only merge in\\n\\/\\/ the form values, not the other stuff\\nif ($mode === \'update\' && $updateSavedForm === \'values\') {\\n    $newFormArray = $newForm->toArray();\\n    $newFormArray = array_merge($newFormArray, array(\\n        \'values\' => $dataArray,\\n    ));       \\n} else {\\n    \\/\\/ In all other cases, we overwrite the record completely!\\n    \\/\\/ In create mode we must save the hash. In update mode, the \\n    \\/\\/ formHashKey will be valid so we can also save it, again.\\n    $newFormArray = array(\\n        \'form\' => $formName,\\n        \'date\' => time(),\\n        \'values\' => $dataArray,\\n        \'ip\' => $modx->getOption(\'REMOTE_ADDR\', $_SERVER, \'\'),\\n        \'context_key\' => $modx->resource->get(\'context_key\'),\\n        \'encrypted\' => $formEncrypt,\\n        \'hash\' => $formHashKey,\\n    );\\n}\\n\\/\\/ Convert to object\\n$newForm->fromArray($newFormArray);\\n\\/\\/ Attempt to save\\nif (!$newForm->save()) {\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[FormItSaveForm] An error occurred while trying to save the submitted form: \' . print_r($newForm->toArray(), true));\\n    return false;\\n}\\n\\/\\/ Pass the hash and form data back to the user\\n$hook->setValue(\'savedForm\', $newForm->toArray());\\n$hook->setValue($formHashKeyField, $newForm->get(\'hash\'));\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt hook for saving filled-in forms. - Based on FormSave\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n$values = $hook->getValues();\\n$formName = $modx->getOption(\'formName\', $formit->config, \'form-\'.$modx->resource->get(\'id\'));\\n\\/\\/ process formName. Pick a value from the form\\n\\/\\/ Inspired from the email\'s hook of formit (fihooks.class.php)\\nif (is_string($formName)) {\\n    foreach ($fields as $k => $v) {\\n        if (is_scalar($k) && is_scalar($v)) {\\n            $formName = str_replace(\'[[+\'.$k.\']]\',$v,$formName);\\n        }\\n    }\\n}\\n\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\n\\/\\/ In order to use update process, you need to provide the hash key to the user somehow\\n\\/\\/ Usually with [[!FormItRetriever]] to populate this form field:\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\n\\/\\/ Disable if you want to use the session_id() in your hash, like FormIt does\\n\\/\\/ WARNING: this can cause potential hash key collisions and overwriting of the wrong form record!!\\n$formHashKeyRandom = $modx->getOption(\'formHashKeyRandom\', $formit->config, true);\\n\\/\\/ process formHashKeyField into variable for later use\\n$formHashKey = (isset($values[$formHashKeyField])) ? (string) $values[$formHashKeyField] : \'\';\\n\\/\\/ our hashing methods return 32 chars\\nif (strlen($formHashKey) !== 32) $formHashKey = \'\';\\nunset($values[$formHashKeyField]);\\n\\nif ($formFields) {\\n    $formFields = explode(\',\', $formFields);\\n    foreach($formFields as $k => $v) {\\n        $formFields[$k] = trim($v);\\n    }\\n}\\n\\/\\/ Build the data array\\n$dataArray = array();\\nif ($formFields) {\\n    foreach ($formFields as $field) {\\n        $fieldValue = isset($values[$field]) ? $values[$field] : \'\';\\n        \\/\\/ When field is file field, value is an array\\n        if (is_array($fieldValue) && isset($fieldValue[\'tmp_name\'], $fieldValue[\'name\'])) {\\n            $fieldValue = $fieldValue[\'name\'];\\n        }\\n        $dataArray[$field] = $fieldValue;\\n    }\\n} else {\\n    $dataArray = $values;\\n}\\n\\/\\/ Change the fieldnames\\nif ($fieldNames){\\n    $newDataArray = array();\\n    $fieldLabels = array();\\n    $formFieldNames = explode(\',\', $fieldNames);\\n    foreach($formFieldNames as $formFieldName){\\n        list($name, $label) = explode(\'==\', $formFieldName);\\n        $fieldLabels[trim($name)] = trim($label);\\n    }\\n    foreach ($dataArray as $key => $value) {\\n        if($fieldLabels[$key]){\\n            $newDataArray[$fieldLabels[$key]] = $value;\\n        }else{\\n            $newDataArray[$key] = $value;\\n        }\\n    }\\n    $dataArray = $newDataArray;\\n}\\n\\/\\/ We only enter update mode if we already have a valid formHashKey (tested above)\\n\\/\\/ AND the updateSavedForm param was set to a truth-y value.\\n$mode = ($updateSavedForm && $formHashKey) ? \'update\' : \'create\';\\n\\/\\/ Create\\/get obj\\n$newForm = null;\\nif ($mode === \'update\') {\\n    $newForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\n}\\nif ($newForm === null) $newForm = $modx->newObject(\'FormItForm\');\\n\\n\\/\\/ Handle encryption\\nif($formEncrypt){\\n    $dataArray = $newForm->encrypt($modx->toJSON($dataArray));\\n} else {\\n    $dataArray = $modx->toJSON($dataArray);\\n}\\n\\n\\/\\/ Create new hash key on create mode, and handle invalid hash keys. \\nif ($mode === \'create\') {\\n    $formHashKey = ($formHashKeyRandom) ? $newForm->generatePseudoRandomHash() : pathinfo($formit->getStoreKey(), PATHINFO_BASENAME);\\n}\\n\\n\\/\\/ Array from which to populate form record\\n$newFormArray = array();\\n\\n\\/\\/ Special case: if updateSavedForm has the flag \'values\' we only merge in\\n\\/\\/ the form values, not the other stuff\\nif ($mode === \'update\' && $updateSavedForm === \'values\') {\\n    $newFormArray = $newForm->toArray();\\n    $newFormArray = array_merge($newFormArray, array(\\n        \'values\' => $dataArray,\\n    ));       \\n} else {\\n    \\/\\/ In all other cases, we overwrite the record completely!\\n    \\/\\/ In create mode we must save the hash. In update mode, the \\n    \\/\\/ formHashKey will be valid so we can also save it, again.\\n    $newFormArray = array(\\n        \'form\' => $formName,\\n        \'date\' => time(),\\n        \'values\' => $dataArray,\\n        \'ip\' => $modx->getOption(\'REMOTE_ADDR\', $_SERVER, \'\'),\\n        \'context_key\' => $modx->resource->get(\'context_key\'),\\n        \'encrypted\' => $formEncrypt,\\n        \'hash\' => $formHashKey,\\n    );\\n}\\n\\/\\/ Convert to object\\n$newForm->fromArray($newFormArray);\\n\\/\\/ Attempt to save\\nif (!$newForm->save()) {\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[FormItSaveForm] An error occurred while trying to save the submitted form: \' . print_r($newForm->toArray(), true));\\n    return false;\\n}\\n\\/\\/ Pass the hash and form data back to the user\\n$hook->setValue(\'savedForm\', $newForm->toArray());\\n$hook->setValue($formHashKeyField, $newForm->get(\'hash\'));\\nreturn true;"}',
        'guid' => 'f3e4b212b565958bb354552e60eae2be',
        'native_key' => NULL,
        'signature' => 'ca66242ac75de2cb8ace15b310dc7ff8',
      ),
      '355c234f3f910e5c6f8612d8014c0b0d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItLoadSavedForm","description":"Prehook to load previously saved form.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt\\n *\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\n * Copyright 2016 by YJ Tso <yj@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt prehook for fetching saved form data. - Based on FormItSaveForm\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n\\/\\/ If prehook fails do we continue?\\n$return = $modx->getOption(\'returnValueOnFail\', $formit->config, true);\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\n\\/\\/ If FormIt config says don\'t update, don\'t do it\\nif (!$updateSavedForm) return $return;\\n\\/\\/ In order to load form values, the user must provide the hash key somehow\\n\\/\\/ Usually with a $_GET parameter, but a property in $formit->config will override.\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\n$formHashKey = \'\';\\nif (isset($_GET[$formHashKeyField])) $formHashKey = (string) $_GET[$formHashKeyField];\\nif ($hook->getValue($formHashKeyField)) $formHashKey = (string) $hook->getValue($formHashKeyField);\\nif (isset($formit->config[$formHashKeyField])) $formHashKey = $formit->config[$formHashKeyField];\\n\\/\\/ our hashing methods return 32 chars. if no valid hash key we\'re done here.\\nif (strlen($formHashKey) !== 32) return $return;\\n\\n\\/\\/ Try to fetch the saved form\\n$savedForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\nif (!$savedForm) return $return;\\n\\nif ($formFields) {\\n    $formFields = explode(\',\', $formFields);\\n    foreach($formFields as $k => $v) {\\n        $formFields[$k] = trim($v);\\n    }\\n}\\n\\n\\/\\/ Initialize the data array\\n\\/\\/ Handle encryption\\nif ($formEncrypt) {\\n    $data = $savedForm->decrypt();\\n} else {\\n    $data = $savedForm->get(\'values\');\\n}\\nif (is_string($data)) $data = $modx->fromJSON($data);\\nif (!is_array($data)) return $return;\\n\\n\\/\\/Change the fieldnames\\nif ($fieldNames) {\\n    $newDataArray = array();\\n    $fieldLabels = array();\\n    $formFieldNames = explode(\',\', $fieldNames);\\n    foreach($formFieldNames as $formFieldName){\\n        list($name, $label) = explode(\'==\', $formFieldName);\\n        \\/\\/ reverse order from FormItSaveForm snippet\\n        $fieldLabels[trim($label)] = trim($name);\\n    }\\n    foreach ($data as $key => $value) {\\n        if ($fieldLabels[$key]) {\\n            $newDataArray[$fieldLabels[$key]] = $value;\\n        }else{\\n            $newDataArray[$key] = $value;\\n        }\\n    }\\n    $data = $newDataArray;\\n}\\n\\n\\/\\/ Always pass back in the provided hash key\\n$data[$formHashKeyField] = $formHashKey;\\n$hook->setValues($data);\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\n * Copyright 2016 by YJ Tso <yj@modx.com>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * A custom FormIt prehook for fetching saved form data. - Based on FormItSaveForm\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var FormIt $formit\\n * @var fiHooks $hook\\n * \\n * @package formit\\n *\\/\\n\\/* setup default properties *\\/\\n\\/\\/ If prehook fails do we continue?\\n$return = $modx->getOption(\'returnValueOnFail\', $formit->config, true);\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\n\\/\\/ If FormIt config says don\'t update, don\'t do it\\nif (!$updateSavedForm) return $return;\\n\\/\\/ In order to load form values, the user must provide the hash key somehow\\n\\/\\/ Usually with a $_GET parameter, but a property in $formit->config will override.\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\n$formHashKey = \'\';\\nif (isset($_GET[$formHashKeyField])) $formHashKey = (string) $_GET[$formHashKeyField];\\nif ($hook->getValue($formHashKeyField)) $formHashKey = (string) $hook->getValue($formHashKeyField);\\nif (isset($formit->config[$formHashKeyField])) $formHashKey = $formit->config[$formHashKeyField];\\n\\/\\/ our hashing methods return 32 chars. if no valid hash key we\'re done here.\\nif (strlen($formHashKey) !== 32) return $return;\\n\\n\\/\\/ Try to fetch the saved form\\n$savedForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\nif (!$savedForm) return $return;\\n\\nif ($formFields) {\\n    $formFields = explode(\',\', $formFields);\\n    foreach($formFields as $k => $v) {\\n        $formFields[$k] = trim($v);\\n    }\\n}\\n\\n\\/\\/ Initialize the data array\\n\\/\\/ Handle encryption\\nif ($formEncrypt) {\\n    $data = $savedForm->decrypt();\\n} else {\\n    $data = $savedForm->get(\'values\');\\n}\\nif (is_string($data)) $data = $modx->fromJSON($data);\\nif (!is_array($data)) return $return;\\n\\n\\/\\/Change the fieldnames\\nif ($fieldNames) {\\n    $newDataArray = array();\\n    $fieldLabels = array();\\n    $formFieldNames = explode(\',\', $fieldNames);\\n    foreach($formFieldNames as $formFieldName){\\n        list($name, $label) = explode(\'==\', $formFieldName);\\n        \\/\\/ reverse order from FormItSaveForm snippet\\n        $fieldLabels[trim($label)] = trim($name);\\n    }\\n    foreach ($data as $key => $value) {\\n        if ($fieldLabels[$key]) {\\n            $newDataArray[$fieldLabels[$key]] = $value;\\n        }else{\\n            $newDataArray[$key] = $value;\\n        }\\n    }\\n    $data = $newDataArray;\\n}\\n\\n\\/\\/ Always pass back in the provided hash key\\n$data[$formHashKeyField] = $formHashKey;\\n$hook->setValues($data);\\nreturn true;"}',
        'guid' => '4a309ee004f4985e33da92de054fd6f4',
        'native_key' => NULL,
        'signature' => '4f56d1b340fbaa9cd83dc557c0bbbd7c',
      ),
    ),
    'Plugins' => 
    array (
      '3bc93abc3028ae523fb6d1881f329040' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            '0a8bb3f8301fb51b3f4be1865b9a255a' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnManagerPageBeforeRender","priority":0,"propertyset":0}',
              'guid' => 'b0385e23ca0eff2188468b5158d7d37d',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnManagerPageBeforeRender',
              ),
              'signature' => '2d421147cdb0749ac7121dfe9b51481b',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormIt","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2017 by Sterc <modx@sterc.nl>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormIt plugin\\n *\\n * @package formit\\n *\\/\\n\\n$formit = $modx->getService(\\n    \'formit\',\\n    \'FormIt\',\\n    $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\').\'components\\/formit\\/\') .\'model\\/formit\\/\',\\n    array()\\n);\\n\\nif (!($formit instanceof FormIt)) {\\n    return;\\n}\\n\\nswitch ($modx->event->name) {\\n    case \'OnManagerPageBeforeRender\':\\n        \\/\\/ If migration status is false, show migrate alert message bar in manager\\n        if (method_exists(\'FormIt\',\'encryptionMigrationStatus\')) {\\n            if (!$formit->encryptionMigrationStatus()) {\\n                $modx->lexicon->load(\'formit:mgr\');\\n                $properties = array(\'message\' => $modx->lexicon(\'formit.migrate_alert\'));\\n                $chunk = $formit->_getTplChunk(\'migrate\\/alert\');\\n                if ($chunk) {\\n                    $modx->regClientStartupHTMLBlock($chunk->process($properties));\\n                    $modx->regClientCSS($formit->config[\'cssUrl\'] . \'migrate.css\');\\n                }\\n            }\\n        }\\n}","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt\\n *\\n * Copyright 2009-2017 by Sterc <modx@sterc.nl>\\n *\\n * FormIt is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit\\n *\\/\\n\\/**\\n * FormIt plugin\\n *\\n * @package formit\\n *\\/\\n\\n$formit = $modx->getService(\\n    \'formit\',\\n    \'FormIt\',\\n    $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\').\'components\\/formit\\/\') .\'model\\/formit\\/\',\\n    array()\\n);\\n\\nif (!($formit instanceof FormIt)) {\\n    return;\\n}\\n\\nswitch ($modx->event->name) {\\n    case \'OnManagerPageBeforeRender\':\\n        \\/\\/ If migration status is false, show migrate alert message bar in manager\\n        if (method_exists(\'FormIt\',\'encryptionMigrationStatus\')) {\\n            if (!$formit->encryptionMigrationStatus()) {\\n                $modx->lexicon->load(\'formit:mgr\');\\n                $properties = array(\'message\' => $modx->lexicon(\'formit.migrate_alert\'));\\n                $chunk = $formit->_getTplChunk(\'migrate\\/alert\');\\n                if ($chunk) {\\n                    $modx->regClientStartupHTMLBlock($chunk->process($properties));\\n                    $modx->regClientCSS($formit->config[\'cssUrl\'] . \'migrate.css\');\\n                }\\n            }\\n        }\\n}"}',
        'guid' => 'f3362fbe218b7c8e8c28586ee48a6cc8',
        'native_key' => NULL,
        'signature' => '5057fcab626b7f95991099c1d27dbc67',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Children' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'parent',
        1 => 'category',
      ),
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
  ),
  'namespace' => 'formit',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"formit-3.0.1-pl\\/modCategory\\/db5e067d2e04e0a639340b1278cde85d\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"formit"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"formit-3.0.1-pl\\/modCategory\\/db5e067d2e04e0a639340b1278cde85d\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"formit"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"formit-3.0.1-pl\\/modCategory\\/db5e067d2e04e0a639340b1278cde85d.gpm.resolve.tables.resolver","type":"php","name":"gpm.resolve.tables"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"formit-3.0.1-pl\\/modCategory\\/db5e067d2e04e0a639340b1278cde85d.resolve.tables.resolver","type":"php","name":"resolve.tables"}',
    ),
    4 => 
    array (
      'type' => 'php',
      'body' => '{"source":"formit-3.0.1-pl\\/modCategory\\/db5e067d2e04e0a639340b1278cde85d.setupoptions.resolver.resolver","type":"php","name":"setupoptions.resolver"}',
    ),
    5 => 
    array (
      'type' => 'php',
      'body' => '{"source":"formit-3.0.1-pl\\/modCategory\\/db5e067d2e04e0a639340b1278cde85d.stercextra.resolver.resolver","type":"php","name":"stercextra.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '4bdd4cc1aacd06c1111ec543249496f1',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'db5e067d2e04e0a639340b1278cde85d',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"FormIt","rank":0}',
);